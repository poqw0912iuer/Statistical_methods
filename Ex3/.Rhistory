test <- cbind(kyphosis[(((i-1)*10+1):i*10),2], kyphosis[(((i-1)*10+1):i*10),3], kyphosis[(((i-1)*10+1):i*10),4])
train <- cbind(kyphosis[-(((i-1)*10+1):i*10),2], kyphosis[-(((i-1)*10+1):i*10),3], kyphosis[-(((i-1)*10+1):i*10),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):i*10),1], k = 3, prob=TRUE)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*10+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 10
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[(((i-1)*10+1):i*10),2], kyphosis[(((i-1)*10+1):i*10),3], kyphosis[(((i-1)*10+1):i*10),4])
train <- cbind(kyphosis[-(((i-1)*10+1):i*10),2], kyphosis[-(((i-1)*10+1):i*10),3], kyphosis[-(((i-1)*10+1):i*10),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):i*10),1], k = 3, prob=TRUE)
for(j in 1:K){
if(control_data[j] == kyphosis$Kyphosis[(i-1)*10+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):i*10),1], k = 3, prob=TRUE)
control_data
knn(train, test, kyphosis[-(((i-1)*10+1):i*10),1], k = 3, prob=TRUE)
i=1
knn(train, test, kyphosis[-(((i-1)*10+1):i*10),1], k = 3, prob=TRUE)
test <- cbind(kyphosis[(((i-1)*10+1):i*10),2], kyphosis[(((i-1)*10+1):i*10),3], kyphosis[(((i-1)*10+1):i*10),4])
train <- cbind(kyphosis[-(((i-1)*10+1):i*10),2], kyphosis[-(((i-1)*10+1):i*10),3], kyphosis[-(((i-1)*10+1):i*10),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):i*10),1], k = 3, prob=TRUE)
control_data
test <- cbind(kyphosis[(((i-1)*10+1):i*10),2], kyphosis[(((i-1)*10+1):i*10),3], kyphosis[(((i-1)*10+1):i*10),4])
train <- cbind(kyphosis[-(((i-1)*10+1):i*10),2], kyphosis[-(((i-1)*10+1):i*10),3], kyphosis[-(((i-1)*10+1):i*10),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):i*10),1], k = 3)
control_data
test
train
test
test <- cbind(kyphosis[(((i-1)*10+1):i*10),2], kyphosis[(((i-1)*10+1):i*10),3], kyphosis[(((i-1)*10+1):i*10),4])
train <- cbind(kyphosis[-(((i-1)*10+1):i*10),2], kyphosis[-(((i-1)*10+1):i*10),3], kyphosis[-(((i-1)*10+1):i*10),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):i*10),1], k = 3)
kyphosis[((i-1)*10+1:i*10),2]
i
1:10
((i-1)*10+1:i*10)
((i-1)*10+1):(i*10)
test <- cbind(kyphosis[((i-1)*10+1):(i*10),2], kyphosis[((i-1)*10+1):(i*10,3], kyphosis[((i-1)*10+1):(i*10),4])
test <- cbind(kyphosis[((i-1)*10+1):(i*10),2], kyphosis[((i-1)*10+1):(i*10),3], kyphosis[((i-1)*10+1):(i*10),4])
test
kyphosis
train <- cbind(kyphosis[-(((i-1)*10+1):i*10),2], kyphosis[-(((i-1)*10+1):i*10),3], kyphosis[-(((i-1)*10+1):i*10),4])
test
train
train <- cbind(kyphosis[-(((i-1)*10+1):(i*10)),2], kyphosis[-(((i-1)*10+1):(i*10)),3], kyphosis[-(((i-1)*10+1):(i*10)),4])
test
train
K = 10
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*10+1):(i*10),2], kyphosis[((i-1)*10+1):(i*10),3], kyphosis[((i-1)*10+1):(i*10),4])
train <- cbind(kyphosis[-(((i-1)*10+1):(i*10)),2], kyphosis[-(((i-1)*10+1):(i*10)),3], kyphosis[-(((i-1)*10+1):(i*10)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):i*10),1], k = 3)
for(j in 1:K){
if(control_data[j] == kyphosis$Kyphosis[(i-1)*10+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 10
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*10+1):(i*10),2], kyphosis[((i-1)*10+1):(i*10),3], kyphosis[((i-1)*10+1):(i*10),4])
train <- cbind(kyphosis[-(((i-1)*10+1):(i*10)),2], kyphosis[-(((i-1)*10+1):(i*10)),3], kyphosis[-(((i-1)*10+1):(i*10)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):(i*10)),1], k = 3)
for(j in 1:K){
if(control_data[j] == kyphosis$Kyphosis[(i-1)*10+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 10
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*10+1):(i*10),2], kyphosis[((i-1)*10+1):(i*10),3], kyphosis[((i-1)*10+1):(i*10),4])
train <- cbind(kyphosis[-(((i-1)*10+1):(i*10)),2], kyphosis[-(((i-1)*10+1):(i*10)),3], kyphosis[-(((i-1)*10+1):(i*10)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):(i*10)),1], k = 3)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*10+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 1
te
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*10+1):(i*10),2], kyphosis[((i-1)*10+1):(i*10),3], kyphosis[((i-1)*10+1):(i*10),4])
train <- cbind(kyphosis[-(((i-1)*10+1):(i*10)),2], kyphosis[-(((i-1)*10+1):(i*10)),3], kyphosis[-(((i-1)*10+1):(i*10)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):(i*10)),1], k = 3)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*10+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 20
te
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*10+1):(i*10),2], kyphosis[((i-1)*10+1):(i*10),3], kyphosis[((i-1)*10+1):(i*10),4])
train <- cbind(kyphosis[-(((i-1)*10+1):(i*10)),2], kyphosis[-(((i-1)*10+1):(i*10)),3], kyphosis[-(((i-1)*10+1):(i*10)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):(i*10)),1], k = 3)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*10+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 20
te
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*K+1):(i*K),2], kyphosis[((i-1)*K+1):(i*K),3], kyphosis[((i-1)*K+1):(i*K),4])
train <- cbind(kyphosis[-(((i-1)*K+1):(i*K)),2], kyphosis[-(((i-1)*K+1):(i*K)),3], kyphosis[-(((i-1)*K+1):(i*K)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):(i*10)),1], k = 3)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*K+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 10
te
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*K+1):(i*K),2], kyphosis[((i-1)*K+1):(i*K),3], kyphosis[((i-1)*K+1):(i*K),4])
train <- cbind(kyphosis[-(((i-1)*K+1):(i*K)),2], kyphosis[-(((i-1)*K+1):(i*K)),3], kyphosis[-(((i-1)*K+1):(i*K)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*10+1):(i*10)),1], k = 3)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*K+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 10
te
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*K+1):(i*K),2], kyphosis[((i-1)*K+1):(i*K),3], kyphosis[((i-1)*K+1):(i*K),4])
train <- cbind(kyphosis[-(((i-1)*K+1):(i*K)),2], kyphosis[-(((i-1)*K+1):(i*K)),3], kyphosis[-(((i-1)*K+1):(i*K)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*K+1):(i*K)),1], k = 3)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*K+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 20
te
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*K+1):(i*K),2], kyphosis[((i-1)*K+1):(i*K),3], kyphosis[((i-1)*K+1):(i*K),4])
train <- cbind(kyphosis[-(((i-1)*K+1):(i*K)),2], kyphosis[-(((i-1)*K+1):(i*K)),3], kyphosis[-(((i-1)*K+1):(i*K)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*K+1):(i*K)),1], k = 3)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*K+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 2
te
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*K+1):(i*K),2], kyphosis[((i-1)*K+1):(i*K),3], kyphosis[((i-1)*K+1):(i*K),4])
train <- cbind(kyphosis[-(((i-1)*K+1):(i*K)),2], kyphosis[-(((i-1)*K+1):(i*K)),3], kyphosis[-(((i-1)*K+1):(i*K)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*K+1):(i*K)),1], k = 3)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*K+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
K = 2
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*K+1):(i*K),2], kyphosis[((i-1)*K+1):(i*K),3], kyphosis[((i-1)*K+1):(i*K),4])
train <- cbind(kyphosis[-(((i-1)*K+1):(i*K)),2], kyphosis[-(((i-1)*K+1):(i*K)),3], kyphosis[-(((i-1)*K+1):(i*K)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*K+1):(i*K)),1], k = 3)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*K+j]){
tot = tot + 1
}
}
}
tot = tot / n
tot
Kfold_CV <- function(K, neighbours){
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
rr=0
for(i in 1:T){
rr=rr+1
test <- cbind(kyphosis[((i-1)*K+1):(i*K),2], kyphosis[((i-1)*K+1):(i*K),3], kyphosis[((i-1)*K+1):(i*K),4])
train <- cbind(kyphosis[-(((i-1)*K+1):(i*K)),2], kyphosis[-(((i-1)*K+1):(i*K)),3], kyphosis[-(((i-1)*K+1):(i*K)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*K+1):(i*K)),1], k = neighbours)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*K+j]){
tot = tot + 1
}
}
}
if(rest != 0){
rr=rr+1
test <- cbind(kyphosis[(T*K+1):(T*K+rest),2], kyphosis[(T*K+1):(T*K+rest),3], kyphosis[(T*K+1):(T*K+rest),4])
train <- cbind(kyphosis[-((T*K+1):(T*K+rest)),2], kyphosis[-((T*K+1):(T*K+rest)),3], kyphosis[-((T*K+1):(T*K+rest)),4])
control_data <- knn(train, test, kyphosis[-((T*K+1):(T*K+rest)),1], k = neighbours)
for(i in 1:rest){
if(control_data[i] != kyphosis$Kyphosis[T*K+i]){
tot = tot + 1
}
}
}
tot = tot / n
rr
}
Kfold_CV <- function(10, 3)
Kfold_CV(10, 3)
Kfold_CV <- function(K, neighbours){
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
rr=0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*K+1):(i*K),2], kyphosis[((i-1)*K+1):(i*K),3], kyphosis[((i-1)*K+1):(i*K),4])
train <- cbind(kyphosis[-(((i-1)*K+1):(i*K)),2], kyphosis[-(((i-1)*K+1):(i*K)),3], kyphosis[-(((i-1)*K+1):(i*K)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*K+1):(i*K)),1], k = neighbours)
for(j in 1:K){
rr=rr+1
if(control_data[j] != kyphosis$Kyphosis[(i-1)*K+j]){
tot = tot + 1
}
}
}
if(rest != 0){
rr=rr+1
test <- cbind(kyphosis[(T*K+1):(T*K+rest),2], kyphosis[(T*K+1):(T*K+rest),3], kyphosis[(T*K+1):(T*K+rest),4])
train <- cbind(kyphosis[-((T*K+1):(T*K+rest)),2], kyphosis[-((T*K+1):(T*K+rest)),3], kyphosis[-((T*K+1):(T*K+rest)),4])
control_data <- knn(train, test, kyphosis[-((T*K+1):(T*K+rest)),1], k = neighbours)
for(i in 1:rest){
if(control_data[i] != kyphosis$Kyphosis[T*K+i]){
tot = tot + 1
}
}
}
tot = tot / n
rr
}
Kfold_CV(10, 3)
Kfold_CV <- function(K, neighbours){
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*K+1):(i*K),2], kyphosis[((i-1)*K+1):(i*K),3], kyphosis[((i-1)*K+1):(i*K),4])
train <- cbind(kyphosis[-(((i-1)*K+1):(i*K)),2], kyphosis[-(((i-1)*K+1):(i*K)),3], kyphosis[-(((i-1)*K+1):(i*K)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*K+1):(i*K)),1], k = neighbours)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*K+j]){
tot = tot + 1
}
}
}
if(rest != 0){
test <- cbind(kyphosis[(T*K+1):(T*K+rest),2], kyphosis[(T*K+1):(T*K+rest),3], kyphosis[(T*K+1):(T*K+rest),4])
train <- cbind(kyphosis[-((T*K+1):(T*K+rest)),2], kyphosis[-((T*K+1):(T*K+rest)),3], kyphosis[-((T*K+1):(T*K+rest)),4])
control_data <- knn(train, test, kyphosis[-((T*K+1):(T*K+rest)),1], k = neighbours)
for(i in 1:rest){
if(control_data[i] != kyphosis$Kyphosis[T*K+i]){
tot = tot + 1
}
}
}
tot = tot / n
tot
}
Kfold_CV(10, 3)
10fold_cv <- rep(0,30)
for(i in 1:30){
10fold_cv[i] <- Kfold_CV(10, i)
}
cv <- rep(0,30)
fold_cv <- rep(0,30)
10fold_cv <- rep(0,30)
10_fold_cv <- rep(0,30)
fold_cv10 <- rep(0,30)
ten_fold_cv <- rep(0,30)
for(i in 1:30){
ten_fold_cv[i] <- Kfold_CV(10, i)
}
plot(ten_fold_cv, type = "l")
?plot
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
plot(ten_fold_cv, type = "l", ylim = c(0,1))
plot(ten_fold_cv, type = "l", ylim = c(0,0.3))
ten_fold_cv <- rep(0,80)
for(i in 1:30){
ten_fold_cv[i] <- Kfold_CV(10, i)
}
plot(ten_fold_cv, type = "l", ylim = c(0,0.3))
ten_fold_cv <- rep(0,80)
for(i in 1:80){
ten_fold_cv[i] <- Kfold_CV(10, i)
}
plot(ten_fold_cv, type = "l", ylim = c(0,0.3))
ten_fold_cv <- rep(0,40)
for(i in 1:80){
ten_fold_cv[i] <- Kfold_CV(10, i)
}
plot(ten_fold_cv, type = "l", ylim = c(0,0.3))
ten_fold_cv <- rep(0,30)
for(i in 1:80){
ten_fold_cv[i] <- Kfold_CV(10, i)
}
plot(ten_fold_cv, type = "l", ylim = c(0,0.3))
ten_fold_cv <- rep(0,40)
for(i in 1:40){
ten_fold_cv[i] <- Kfold_CV(10, i)
}
plot(ten_fold_cv, type = "l", ylim = c(0,0.3))
ten_fold_cv <- rep(0,40)
for(i in 1:70){
ten_fold_cv[i] <- Kfold_CV(10, i)
}
plot(ten_fold_cv, type = "l", ylim = c(0,0.3))
ten_fold_cv <- rep(0,20)
for(i in 1:20){
ten_fold_cv[i] <- Kfold_CV(10, i)
}
plot(ten_fold_cv, type = "l", ylim = c(0,0.3))
plot(ten_fold_cv, type = "l", ylim = c(0,0.3), xlab)
plot(ten_fold_cv, type = "l", ylim = c(0,0.3), xlab = "Number of neighbors")
points(ten_fold_cv, col = "green")
plot(ten_fold_cv, type = "l", ylim = c(0,0.3), xlabel = "Number of neighbors")
points(ten_fold_cv, col = "green")
plot(ten_fold_cv, type = "l", ylim = c(0,0.3), xlab = "Number of neighbors")
plot(ten_fold_cv, type = "l", col = "green", ylim = c(0,0.3), xlab = "Number of neighbors", ylab = "Misclassification Error")
plot(ten_fold_cv, type = "h", col = "green", lwd = 2,
ylim = c(0,0.3), xlab = "Number of neighbors", ylab = "Misclassification Error")
plot(ten_fold_cv, type = "o", col = "green", lwd = 2,
ylim = c(0,0.3), xlab = "Number of neighbors", ylab = "Misclassification Error")
?legend
legend(0, 6, lty = 1,lwd=2,col=c(1,2,3,4,5,6), "10-fold CV")
legend(0,  lty = 1,lwd=2, "10-fold CV")
plot(ten_fold_cv, type = "o", col = "green", lwd = 2,
ylim = c(0,0.3), xlab = "Number of neighbors", ylab = "Misclassification Error")
legend(14, 0.05, lty = 1,lwd=2, "10-fold CV")
plot(ten_fold_cv, type = "o", col = "green", lwd = 2,
ylim = c(0,0.3), xlab = "Number of neighbors", ylab = "Misclassification Error")
legend(14, 0.05, lty = 2,lwd=2, "10-fold CV")
plot(ten_fold_cv, type = "o", col = "green", lwd = 2,
ylim = c(0,0.3), xlab = "Number of neighbors", ylab = "Misclassification Error")
legend(14, 0.05, col ="green", lty = 1,lwd=2, "10-fold CV")
Kfold_CV <- function(K, neighbours){
n = length(kyphosis$Kyphosis)
T = n %/% K
rest = n %% K
tot = 0
for(i in 1:T){
test <- cbind(kyphosis[((i-1)*K+1):(i*K),2], kyphosis[((i-1)*K+1):(i*K),3], kyphosis[((i-1)*K+1):(i*K),4])
train <- cbind(kyphosis[-(((i-1)*K+1):(i*K)),2], kyphosis[-(((i-1)*K+1):(i*K)),3], kyphosis[-(((i-1)*K+1):(i*K)),4])
control_data <- knn(train, test, kyphosis[-(((i-1)*K+1):(i*K)),1], k = neighbours)
for(j in 1:K){
if(control_data[j] != kyphosis$Kyphosis[(i-1)*K+j]){
tot = tot + 1
}
}
}
if(rest != 0){
test <- cbind(kyphosis[(T*K+1):(T*K+rest),2], kyphosis[(T*K+1):(T*K+rest),3], kyphosis[(T*K+1):(T*K+rest),4])
train <- cbind(kyphosis[-((T*K+1):(T*K+rest)),2], kyphosis[-((T*K+1):(T*K+rest)),3], kyphosis[-((T*K+1):(T*K+rest)),4])
control_data <- knn(train, test, kyphosis[-((T*K+1):(T*K+rest)),1], k = neighbours)
for(i in 1:rest){
if(control_data[i] != kyphosis$Kyphosis[T*K+i]){
tot = tot + 1
}
}
}
tot = tot / n
tot
}
ten_fold_cv <- rep(0,20)
for(i in 1:20){
ten_fold_cv[i] <- Kfold_CV(10, i)
}
plot(ten_fold_cv, type = "o", col = "green", lwd = 2,
ylim = c(0,0.3), xlab = "Number of neighbors", ylab = "Misclassification Error")
legend(14, 0.05, col ="green", lty = 1,lwd=2, "10-fold CV")
Kfold_CV <- function(K){
tot = c(0, 0)
names(tot) <- c("lda", "qda")
n = length(kyphosis$Kyphosis)
train <- seq(1:n)
T = n %/% K
rest = n %% K
for(i in 1:T){
lda(Kyphosis ~ ., kyphosis, subset = train[-(((i-1)*K+1):i*K)]) -> zlda
qda(Kyphosis ~ ., kyphosis, subset = train[-(((i-1)*K+1):i*K)]) -> zqda
for(j in 1:K){
if(predict(zlda, kyphosis[(i-1)*K+j,])$class != kyphosis$Kyphosis[(i-1)*K+j]){
tot[1] = tot[1] + 1
}
if(predict(zqda, kyphosis[(i-1)*K+j,])$class != kyphosis$Kyphosis[(i-1)*K+j]){
tot[2] = tot[2] + 1
}
}
}
if(rest != 0){
lda(Kyphosis ~ ., kyphosis, subset = train[-((T*K+1):(T*K+rest))]) -> zlda
qda(Kyphosis ~ ., kyphosis, subset = train[-((T*K+1):(T*K+rest))]) -> zqda
for(i in 1:rest){
if(predict(zlda, kyphosis[T*K+i,])$class != kyphosis$Kyphosis[T*K+i]){
tot[1] = tot[1] + 1
}
if(predict(zqda, kyphosis[T*K+i,])$class != kyphosis$Kyphosis[T*K+i]){
tot[2] = tot[2] + 1
}
}
}
tot = tot / n
tot
}
Kfold_CV(10)
Kfold_CV(11)
Kfold_CV(10)
set.seed(9925)
Kfold_CV(10)
Kfold_CV(11)
Kfold_CV(9)
Kfold_CV(8)
Kfold_CV(7)
Kfold_CV(6)
Kfold_CV(13)
Kfold_CV(20)
Kfold_CV(11)
table(kyphosis[,1])
table(kyphosis[,1])/length(kyphosis[,1])
q()
