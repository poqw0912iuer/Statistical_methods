------Problem B1-------


MassFunction <- function(x){
   x <- (2+x)^125*(1-x)^(18+20)*x^34
   return(x)
}
optimize(function(x)(2+x)^125*(1-x)^(18+20)*x^34, lower=0,upper=1, maximum= T)
plot(function(x)(2+x)^125*(1-x)^(18+20)*x^34)

#Rajection sampling algorithm
RejectionSampling <- function(n){
   y <- numeric(n)
   c <- 1.838839e+29 
   accepted.samples <- 0
   while(accepted.samples < n){
      u <- runif(1)
      if(c* runif(1) < MassFunction(u)){  
         accepted.samples <- accepted.samples+1
         y[accepted.samples] <- u
      }
   }
   return(y)
}

integrate(function(x)(2+x)^125*(1-x)^(18+20)*x^34, lower=0, upper=1)

const <- 2.357695e+28 
y <- RejectionSampling(10000)
truehist(y)
t <- 0:500/100
lines(t, MassFunction(t)/const,lwd = 2)
abline(v = mean(y), col = "red", lwd = 3)

y <- RejectionSampling(10000)
mean(y)
var(y)
integrate(function(x)x*(2+x)^125*(1-x)^(18+20)*x^34/const, lower=0, upper=1)
0.6228062 with absolute error < 1.7e-07
integrate(function(x)(x-0.6228062 )^2*(2+x)^125*(1-x)^(18+20)*x^34/const, lower=0, upper=1)
0.002594932 with absolute error < 5e-08

------Problem B4-------
y <- RejectionSampling(10000)
mean(y)
w <- MassFunction(y)/dbeta(y,2,5)
sum <- sum(w)
posterior_mean <- 1/sum*sum(y*w)
posterior_mean

------Problem (which one???)---------

rInvertedG <- function(n, alpha){
   z = rep(NA,n)
   c = (alpha*exp(1))/(alpha+exp(1))
   for(i in 1:n){
      u <- runif(1)
      if(u < (exp(1)/(exp(1) + alpha)))
         z[i] = ((exp(1) + alpha) / exp(1) * u)^(1/alpha)
      else
         z[i] = log( 1/(1 - u), base = exp(1)) + log(exp(1) * alpha/(exp(1) + alpha), base = exp(1)) 
   }
   return(z)
}

g_pdf <- function(x, alpha){
   c = (alpha*exp(1))/(alpha+exp(1))
   (x<1)*(c*x^(alpha-1)) + (!(x<1))*c*exp(-x)
} 

library(MASS)
truehist(rInvertedG(10000, 0.7))
t <- 0:800/100
lines(t, g_pdf(t, 0.7), lwd=2)

------Proble C2 a)------

#visualisation of target and proposal denisities
c<-2
t <- 0:1000/100
plot (t,dgamma(t,1,1), type="l", col="red")
lines(t, c*g_pdf(t, 0.7), col="blue", lwd=1)
legend("topright", lty = c(1,1),lwd=c(3,3), col=c("blue","red"), c("Target denisity", "c * Proposal denisity"))


------Proble C2 b)------ 

#Rejection sampling from Gamma
rGammaReject <- function(n, alpha){
    c <- 2
    y <- numeric(n) 
    accepted.samples <- 0 
    while (accepted.samples<n) {
       x <- rInvertedG(1, 0.7) 
       f.at.x <- dgamma(x,alpha,1) 
       g.at.x <- g_pdf(x,0.7) 
       accept <- f.at.x / (c*g.at.x) 
       if (runif(1)<accept) { 
          accepted.samples <- accepted.samples+1
          y[accepted.samples] <- x  
       }
    }
    return(y)
}


#Test comparition
y <- rGammaReject(30000, 0.6)
truehist(y) 
t <- 0:700/100
lines(t,dgamma(t,0.6,1), lwd=2)
mean(y)
var(y)

------Proble C3 b)------ 
#Ratio of uniform method for Gamma
rGamma3 <- function(n, alpha){
   y <- numeric(n)
   accepted.samples <- 0
   a <- ((alpha - 1)/exp(1))^(0.5*alpha - 0.5)
   b_plus <- ((alpha+1)/exp(1))^(0.5*alpha +0.5)
   while(accepted.samples < n){
      u <- a*runif(1)
      v <- b_plus*runif(1)
      x <- v/u
      accepted <- (alpha - 1)*log(x) - x
      if(2*log(u) < accepted){
            accepted.samples <- accepted.samples + 1
            y[accepted.samples] <- x
      } 
   }
   return(y)
}
#Test comparition
library(MASS) 
y <- rGamma3(1000, 4) 
truehist(y)   
t <- 0:1500/100
lines(t,dgamma(t,4,1), lwd=2)
mean(y)
var(y)


------Proble C4------
#Rejection sampling from Gamma (alpha (0,1), beta=1)
rGamma1 <- function(n, alpha){
    c <- 2
    y <- numeric(n) 
    accepted.samples <- 0 
    while (accepted.samples<n) {
       x <- rInvertedG(1, 0.7) 
       f.at.x <- dgamma(x,alpha,1) 
       g.at.x <- g_pdf(x,0.7) 
       accept <- f.at.x / (c*g.at.x) 
       if (runif(1)<accept) { 
          accepted.samples <- accepted.samples+1
          y[accepted.samples] <- x  
       }
    }
    return(y)
}

#Gamma distribution (alpha=1, beta=1)
rGamma2 <- function(n){
   y <- numeric(n)
   u <- runif(n)
   y <- -log(u)
   return(y)
}

#Ratio of uniform method for Gamma (alpha>1, beta=1)
rGamma3 <- function(n, alpha){
   y <- numeric(n)
   accepted.samples <- 0
   a <- ((alpha - 1)/exp(1))^(0.5*alpha - 0.5)
   b_plus <- ((alpha+1)/exp(1))^(0.5*alpha +0.5)
   while(accepted.samples < n){
      u <- a*runif(1)
      v <- b_plus*runif(1)
      x <- v/u
      accepted <- (alpha - 1)*log(x) - x
      if(2*log(u) < accepted){
            accepted.samples <- accepted.samples + 1
            y[accepted.samples] <- x
      } 
   }
   return(y)
}

#Gamma distribution (alpha > 0, beta > 0)
rGammaGeneral <- function(n, alpha, beta){
   smaple <- numeric(n)
   if(alpha > 0){
      if(alpha < 1)   smaple <- 1/beta*rGamma1(n, alpha)
      else   smaple <- 1/beta*rGamma3(n, alpha)
   }
   return(smaple)
}

y <- rGammaGeneral(30000, .5, 1) 
truehist(y) 
t <- 0:10000/10
lines(t,dgamma(t,.7, 1), lwd=3)
legend("topright",  "Ga(0.7, 11)")


#Direchlet dist.
rdirichlet1 = function(n, alpha) {
  k = length(alpha)
  r = matrix(0, nrow=n, ncol=k) 
  for (i in 1:k) {
    r[,i] = rGammaGeneral(n, alpha[i], 2) 
  }
  r <- matrix(mapply(function(r, s) {return (r/s)}, r, rowSums(r)), ncol=k)
  return(r)
}
r <- rdirichlet1(10000, c(1,2,3)) 
plot(r, main="alpha=(1, 2, 3)")

mean(r[,1])
mean(r[,2])
mean(r[,3])
var(r)
var(r)

