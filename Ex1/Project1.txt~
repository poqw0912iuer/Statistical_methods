-----PROBLEM A-----

#Exponential distribution
rExpo <- function(n,lambda){ 
  u <- runif(n)
  -log(u)/lambda  
}

#Schape of Exp. Dist.
x <- rExpo(n=10000,lambda=0.5)
hist(x,freq=FALSE)
t <- 0:1000/1
lines(t,dexp(t,rate=0.5),lwd=2)

#Problem A2 c)
#Function that generate frompdf "f"
rF <- function(n,alpha){ 
   u <- runif(n)
   -log(1/u-1)/alpha
}

#Probability denisity function
f <- function(t, alpha){
    alpha*exp(alpha*t)/(1+exp(alpha*t))^2
}

#Plots of denisities
x <- rF(100000,3.2)
hist(x,freq=FALSE)
t <- -100:100/10
lines(t,f(t,3.2),lwd=2)

y <- f(t, 2)

Var<- function(t, alpha){  
    v=0
    v = sum(t^2*f(t, alpha))
    return(v)
}
Var(t, 2)


rG <- function(alpha, n)
{
   x = 1:n
   u = 1:n
   u[i] <- runif(n)
   for(i in 1:n){
   if(any(u < (exp(1)/(exp(1) + alpha)))){ 
      x[i] <- ((exp(1) + alpha) / exp(1) * u)^(1/alpha)
   }
   else
       x[i] <- -log( 1/(1 - u), base = exp(1)) + log(exp(1) * alpha/(exp(1) + alpha), base = exp(1)) 
   }   
   hist(x, freq = FALSE)
}
rG(0.3, 100)
hist(x,freq=FALSE)

g <- function(alpha){
   c = (alpha+exp(1))/(alpha*exp(1))
   curve( (x<1)*(c*x^(alpha-1)) + (!(x<1))*c*exp(-x), 0, 10)
}

g <- function(t, alpha){
   x = 1:n
   c = (alpha*exp(1))/(alpha*exp(1))
   if(any(t > 0 && t < 1))
      x[i] <- (alpha*exp(1))/(alpha*exp(1))*t^(alpha-1)   
   else x[i] <- 0
   #else if(any(t > 1)){
   #   c*exp(-t)
   #} 
   #else 0
   plot(x)
}
g(t, 3)

lines(t,f(t,.3),lwd=2)

------Problem B1-------


MassFunction <- function(x){
   x <- (2+x)^125*(1-x)^(18+20)*x^34
   return(x)
}
optimize(function(x)(2+x)^125*(1-x)^(18+20)*x^34, lower=0,upper=1, maximum= T)
plot(function(x)(2+x)^125*(1-x)^(18+20)*x^34)

#Rajection sampling algorithm
RejectionSampling <- function(n){
   y <- numeric(n)
   c <- 1.838839e+29 
   accepted.samples <- 0
   while(accepted.samples < n){
      u <- runif(1)
      if(c* runif(1) < MassFunction(u)){  
         accepted.samples <- accepted.samples+1
         y[accepted.samples] <- u
      }
   }
   return(y)
}

integrate(function(x)(2+x)^125*(1-x)^(18+20)*x^34, lower=0, upper=1)

const <- 2.357695e+28 
y <- RejectionSampling(10000)
truehist(y)
t <- 0:500/100
lines(t, MassFunction(t)/const,lwd = 2)
abline(v = mean(y), col = "red", lwd = 3)

y <- RejectionSampling(10000)
mean(y)
var(y)
integrate(function(x)x*(2+x)^125*(1-x)^(18+20)*x^34/const, lower=0, upper=1)
0.6228062 with absolute error < 1.7e-07
integrate(function(x)(x-0.6228062 )^2*(2+x)^125*(1-x)^(18+20)*x^34/const, lower=0, upper=1)
0.002594932 with absolute error < 5e-08

------Problem B4-------
y <- RejectionSampling(10000)
mean(y)
w <- MassFunction(y)/dbeta(y,2,5)
sum <- sum(w)
posterior_mean <- 1/sum*sum(y*w)
posterior_mean


---Problem C1---

rnorm1 <- function(n){
  u = runif(n)
  v = runif(n)
  x=rep(0,n)

  for (i in 1:n){
    x[i] = sqrt(-2*log(u[i]))*cos(2*pi*v[i])  
  }
}
truehist(rnorm(100000))
t <- -100:100/10
lines(t,dnorm(t,mean=0,sd=1),lwd=2)

---Problem D 1---

MVrnorm <- function(n, mu, sigma) {
    ncols <- ncol(sigma)
    m <- rep(mu, each = n) 
    m + matrix(rnorm(n * ncols), ncol = ncols) %*% chol(sigma)
}

sigma <- matrix(c(1, -0.2, 0.7, -0.2, 1, -0.1, 0.7, -0.1, 1), ncol = 3)
mu <- c( 7, -12, 4)

x <- mvrnorm(100000, mu,  sigma)
cor(x)
colMeans(x)

#comparision of integrate multivariate normal distribution
x = mvrnorm(100000, mu, sigma)
var(x)
colMeans(x)

sigma <- matrix(c(10,0,0,10),2,2)
mu <- c(1,2)
y <- MVrnorm(100000, mu,  sigma)
x = mvrnorm(100000, mu, sigma)

# use a kernel density estimator to plot the distribution
library(gplots)
y.kde = kde2d(y[,1], y[,2], n=100)
x.kde = kde2d(x[,1], x[,2], n=100)

par(mfrow=c(1,2))
image(y.kde, xlim=c(-10,10), ylim=c(-10,10))
contour(y.kde, add = T)
image(x.kde, xlim=c(-10,10), ylim=c(-10,10))
contour(x.kde, add = T)



-----PRoblem D2-----

#Exponential distribution
rExpo <- function(n,lambda){ 
  u <- runif(n)
  x <- -log(u)/lambda 
}

#Schape of Exp. Dist.
x <- rExpo(n=10000,lambda=0.5)
hist(x,freq=FALSE)
t <- 0:1000/1
lines(t,dexp(t,rate=0.5),lwd=2)

#Gamma distribution
rGammaInt <- function(n,k,lambda){
  x <- matrix(rExpo(n=n*k,lambda=lambda),ncol=k)
  apply(x,1,sum)
}

#Schape of Gamma. Dist
y <- rGammaInt(10000,6,0.5) 
hist(y,freq=FALSE)
t <- 0:1000/1
lines(t,dgamma(t,6,0.5),lwd=2)

# c coefficient
alpha <- 2.4 
lambda <- 4
k <- floor(alpha)
c <- dgamma(alpha-k,alpha,lambda) / dgamma(alpha-k,k,lambda-1)  #Not smaller, than 1 than intersects
t <- 0:1000/250 
plot(t,c*dgamma(t,k,lambda-1),type="l") 
lines(t,dgamma(t,alpha,lambda),lty=2)
abline(v=alpha-k,lty=3,col="grey") 
legend("topright",lty=2:1,c("f(t)","c*g(t)"))

#Rejection sampling from Gamma
rGammaReject <- function(n, alpha, lambda){
#n <- 1000
#alpha <- 3.1 
#lambda <- 2
k <- floor(alpha) 
c <- dgamma(alpha-k,alpha,lambda) / dgamma(alpha-k,k,lambda-1)
y <- numeric(n) 
accepted.samples <- 0 
while (accepted.samples<n) {
 x <- rGammaInt(1,k,lambda-1) 
 f.at.x <- dgamma(x,alpha,lambda) 
 g.at.x <- dgamma(x,k,lambda-1) 
 accept <- f.at.x / (c*g.at.x) 
 if (runif(1)<accept) { 
  accepted.samples <- accepted.samples+1
  y[accepted.samples] <- x 
  #return(y)
 }
}
}
y <- rGammaReject(1000, 3.1, 2)

#Test - comparition
hist(y,freq=FALSE) 
t <- 0:1000/100
lines(t,dgamma(t,3.1,2),lwd=2) 

#Direchlet dist.
rdirichlet = function(n, alpha) {
  k = length(alpha)
  r = matrix(0, nrow=n, ncol=k) 
  for (i in 1:k) {
    r[,i] = rgamma(n, alpha[i], 2)# rGammaReject(n, 3.2, 2)#
  }
  r <- matrix(mapply(function(r, s) {return (r/s)}, r, rowSums(r)), ncol=k)
  return(r)
}
r <- rdirichlet(1000, c(10,20,30)) 
