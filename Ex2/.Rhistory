b_new <- Y+E*exp(new)*(new-1)
c_new <- E*exp(new)
Q_num <- Kv*diag.spam(1,n)+diag(c_new)
Q_den <- Kv*diag(1,n)+diag(c)
Epsilon_num <- Kv*u+b_new
Epsilon_den <- Kv*u+b
Mean_num <- solve(Q_num, Epsilon_num)
Mean_den <- solve(Q_den, Epsilon_den)
log.proposal.ratio <- (-0.5*t(Mean_num)%*%Q_num%*%Mean_num - 0.5*t(eta)%*%Q_num%*%eta
+t(eta)%*%Epsilon_num)*log(sqrt(det(Q_num)))
-(-0.5*t(Mean_den)%*%Q_den%*%Mean_den - 0.5*t(new)%*%Q_den%*%new
+t(new)%*%Epsilon_den)*log(sqrt(det(Q_den)))
alpha <- min(1, log.target.ratio+log.proposal.ratio)
if(log(runif(1)) <= alpha){
eta <- new
yes <- yes + 1
}
else{
no <- no + 1
}
}
acceptance <- yes/(yes + no) * 100
container[i,] <- c(Ku, Kv, u[387], eta[387], acceptance)
}
container
}
GI(10,1,1)->vol
vol
GI <- function(N, thin, burn_in, memory=list(nnzcolindices=6467)){
container <- matrix(0, ncol = 5, nrow = N)
n <- 544
yes <- 0
no <- 0
alpha_u <- 1
alpha_v <-
beta_u <- 0.01
beta_v <- 0.01
#Y = matrix(Y, ncol = 1)
#E = matrix(E, ncol = 1)
u <- runif(n)
#u = matrix(u, ncol = 1)
eta <- runif(n)
#eta = matrix(eta, ncol = 1)
for(i in 1:N){
for(j in 1:thin){
Ku <- rgamma(1, (n-2)/2+alpha_u, beta_u+0.5*t(u)%*%R%*%u)
Kv <- rgamma(1, n/2+alpha_v, beta_v+0.5*t(eta-u)%*%(eta-u))
u <- rmvnorm.canonical(1, Kv*diag(1,n)%*%eta, Ku*R+Kv*diag(1,n))
u <- t(u)
b <- Y+E*exp(eta)*(eta-1)
c <- E*exp(eta)
new <- rmvnorm.canonical(1, Kv*u+b, Kv*diag(1,n)+diag(c))
new <- t(new)
log.target.ratio <- (-0.5*t(new)%*%new*Kv+t(new)%*%u+t(new)%*%Y-t(exp(new))%*%E)
-(-0.5*t(eta)%*%eta*Kv+t(eta)%*%u+t(eta)%*%Y-t(exp(eta))%*%E)
b_new <- Y+E*exp(new)*(new-1)
c_new <- E*exp(new)
Q_num <- Kv*diag.spam(1,n)+diag(c_new)
Q_den <- Kv*diag(1,n)+diag(c)
Epsilon_num <- Kv*u+b_new
Epsilon_den <- Kv*u+b
Mean_num <- solve(Q_num, Epsilon_num)
Mean_den <- solve(Q_den, Epsilon_den)
log.proposal.ratio <- (-0.5*t(Mean_num)%*%Q_num%*%Mean_num - 0.5*t(eta)%*%Q_num%*%eta
+t(eta)%*%Epsilon_num)*log(sqrt(det(Q_num)))
-(-0.5*t(Mean_den)%*%Q_den%*%Mean_den - 0.5*t(new)%*%Q_den%*%new
+t(new)%*%Epsilon_den)*log(sqrt(det(Q_den)))
alpha <- min(1, log.target.ratio+log.proposal.ratio)
if(log(runif(1)) <= alpha){
eta <- new
yes <- yes + 1
}
else{
no <- no + 1
}
}
acceptance <- yes/(yes + no) * 100
container[i,] <- c(Ku, Kv, u[387], eta[387], acceptance)
}
container
}
t1 <- Sys.time()
GI(10,1,1)->vol
Sys.time()-t1
GI <- function(N, thin, burn_in, memory=list(nnzcolindices=6467)){
container <- matrix(0, ncol = 5, nrow = N)
n <- 544
yes <- 0
no <- 0
alpha_u <- 1
alpha_v <-
beta_u <- 0.01
beta_v <- 0.01
Y = matrix(Y, ncol = 1)
E = matrix(E, ncol = 1)
u <- runif(n)
u = matrix(u, ncol = 1)
eta <- runif(n)
eta = matrix(eta, ncol = 1)
for(i in 1:N){
for(j in 1:thin){
Ku <- rgamma(1, (n-2)/2+alpha_u, beta_u+0.5*t(u)%*%R%*%u)
Kv <- rgamma(1, n/2+alpha_v, beta_v+0.5*t(eta-u)%*%(eta-u))
u <- rmvnorm.canonical(1, Kv*diag(1,n)%*%eta, Ku*R+Kv*diag(1,n))
u <- t(u)
b <- Y+E*exp(eta)*(eta-1)
c <- E*exp(eta)
new <- rmvnorm.canonical(1, Kv*u+b, Kv*diag(1,n)+diag(c))
new <- t(new)
log.target.ratio <- (-0.5*t(new)%*%new*Kv+t(new)%*%u+t(new)%*%Y-t(exp(new))%*%E)
-(-0.5*t(eta)%*%eta*Kv+t(eta)%*%u+t(eta)%*%Y-t(exp(eta))%*%E)
b_new <- Y+E*exp(new)*(new-1)
c_new <- E*exp(new)
Q_num <- Kv*diag.spam(1,n)+diag(c_new)
Q_den <- Kv*diag(1,n)+diag(c)
Epsilon_num <- Kv*u+b_new
Epsilon_den <- Kv*u+b
Mean_num <- solve(Q_num, Epsilon_num)
Mean_den <- solve(Q_den, Epsilon_den)
log.proposal.ratio <- (-0.5*t(Mean_num)%*%Q_num%*%Mean_num - 0.5*t(eta)%*%Q_num%*%eta
+t(eta)%*%Epsilon_num)*log(sqrt(det(Q_num)))
-(-0.5*t(Mean_den)%*%Q_den%*%Mean_den - 0.5*t(new)%*%Q_den%*%new
+t(new)%*%Epsilon_den)*log(sqrt(det(Q_den)))
alpha <- min(1, log.target.ratio+log.proposal.ratio)
if(log(runif(1)) <= alpha){
eta <- new
yes <- yes + 1
}
else{
no <- no + 1
}
}
acceptance <- yes/(yes + no) * 100
container[i,] <- c(Ku, Kv, u[387], eta[387], acceptance)
}
container
}
t1 <- Sys.time()
GI(10,1,1)->vol
Sys.time()-t1
Kv
Ku
u
GI <- function(N, thin, burn_in, memory=list(nnzcolindices=6467)){
container <- matrix(0, ncol = 5, nrow = N)
n <- 544
yes <- 0
no <- 0
alpha_u <- 1
alpha_v <-
beta_u <- 0.01
beta_v <- 0.01
#Y = matrix(Y, ncol = 1)
#E = matrix(E, ncol = 1)
u <- runif(n)
#u = matrix(u, ncol = 1)
eta <- runif(n)
eta = matrix(eta, ncol = 1)
for(i in 1:N){
for(j in 1:thin){
Ku <- rgamma(1, (n-2)/2+alpha_u, beta_u+0.5*t(u)%*%R%*%u)
Kv <- rgamma(1, n/2+alpha_v, beta_v+0.5*t(eta-u)%*%(eta-u))
u <- rmvnorm.canonical(1, Kv*diag(1,n)%*%eta, Ku*R+Kv*diag(1,n))
u <- t(u)
b <- Y+E*exp(eta)*(eta-1)
c <- E*exp(eta)
new <- rmvnorm.canonical(1, Kv*u+b, Kv*diag(1,n)+diag(c))
new <- t(new)
log.target.ratio <- (-0.5*t(new)%*%new*Kv+t(new)%*%u+t(new)%*%Y-t(exp(new))%*%E)
-(-0.5*t(eta)%*%eta*Kv+t(eta)%*%u+t(eta)%*%Y-t(exp(eta))%*%E)
b_new <- Y+E*exp(new)*(new-1)
c_new <- E*exp(new)
Q_num <- Kv*diag.spam(1,n)+diag.spam(c_new)
Q_den <- Kv*diag(1,n)+diag(c)
Epsilon_num <- Kv*u+b_new
Epsilon_den <- Kv*u+b
Mean_num <- solve(Q_num, Epsilon_num)
Mean_den <- solve(Q_den, Epsilon_den)
log.proposal.ratio <- (-0.5*t(Mean_num)%*%Q_num%*%Mean_num - 0.5*t(eta)%*%Q_num%*%eta
+t(eta)%*%Epsilon_num)*log(sqrt(det(Q_num)))
-(-0.5*t(Mean_den)%*%Q_den%*%Mean_den - 0.5*t(new)%*%Q_den%*%new
+t(new)%*%Epsilon_den)*log(sqrt(det(Q_den)))
alpha <- min(1, log.target.ratio+log.proposal.ratio)
if(log(runif(1)) <= alpha){
eta <- new
yes <- yes + 1
}
else{
no <- no + 1
}
}
acceptance <- yes/(yes + no) * 100
container[i,] <- c(Ku, Kv, u[387], eta[387], acceptance)
}
container
}
t1 <- Sys.time()
GI(10,1,1)->vol
Sys.time()-t1
library(spam) # load the data
str(Oral) # see structure of data
?is.matrix
is.matrix(E)
attach(Oral) # allow direct referencing to Y and E
# generate some plots
library(fields, warn.conflict=FALSE)
library(colorspace)
is.matrix(Y)
typeof(Y)
typeof(E)
?is.array
as.aaray(E)
as.array(E)
is.array(E)
is.matrix(E)
diag.spam(E)
diag(x, nrow = length(x))
diag(c_new, nrow = length(c_new))
x <- rep(2,7)
diag(x, nrow = length(x))
x <- rep(1:9)
diag(x, nrow = length(x))
is.array(x)
is.matrix(x)
is.list(x)
x <- rep(1:9)
is.list(x)
is.array(x)
is.matrix(x)
GI <- function(N, thin, burn_in, memory=list(nnzcolindices=6467)){
container <- matrix(0, ncol = 5, nrow = N)
n <- 544
yes <- 0
no <- 0
alpha_u <- 1
alpha_v <-
beta_u <- 0.01
beta_v <- 0.01
#Y = matrix(Y, ncol = 1)
#E = matrix(E, ncol = 1)
u <- runif(n)
#u = matrix(u, ncol = 1)
eta <- runif(n)
eta = matrix(eta, ncol = 1)
for(i in 1:N){
for(j in 1:thin){
Ku <- rgamma(1, (n-2)/2+alpha_u, beta_u+0.5*t(u)%*%R%*%u)
Kv <- rgamma(1, n/2+alpha_v, beta_v+0.5*t(eta-u)%*%(eta-u))
u <- rmvnorm.canonical(1, Kv*diag(1,n)%*%eta, Ku*R+Kv*diag(1,n))
u <- t(u)
b <- Y+E*exp(eta)*(eta-1)
c <- E*exp(eta)
new <- rmvnorm.canonical(1, Kv*u+b, Kv*diag(1,n)+diag(c))
new <- t(new)
log.target.ratio <- (-0.5*t(new)%*%new*Kv+t(new)%*%u+t(new)%*%Y-t(exp(new))%*%E)
-(-0.5*t(eta)%*%eta*Kv+t(eta)%*%u+t(eta)%*%Y-t(exp(eta))%*%E)
b_new <- Y+E*exp(new)*(new-1)
c_new <- E*exp(new)
Q_num <- Kv*diag.spam(1,n)+diag.spam(c_new)
Q_den <- Kv*diag(1,n)+diag(c)
Epsilon_num <- Kv*u+b_new
Epsilon_den <- Kv*u+b
Mean_num <- solve(Q_num, Epsilon_num)
Mean_den <- solve(Q_den, Epsilon_den)
log.proposal.ratio <- (-0.5*t(Mean_num)%*%Q_num%*%Mean_num - 0.5*t(eta)%*%Q_num%*%eta
+t(eta)%*%Epsilon_num)*log(sqrt(det(Q_num)))
-(-0.5*t(Mean_den)%*%Q_den%*%Mean_den - 0.5*t(new)%*%Q_den%*%new
+t(new)%*%Epsilon_den)*log(sqrt(det(Q_den)))
alpha <- min(1, log.target.ratio+log.proposal.ratio)
if(log(runif(1)) <= alpha){
eta <- new
no <- no + 1
}
else{
yes <- yes + 1
}
}
acceptance <- yes/(yes + no) * 100
container[i,] <- c(Ku, Kv, u[387], eta[387], acceptance)
}
container
}
t1 <- Sys.time()
GI(10,1,1)->vol
Sys.time()-t1
GI <- function(N, thin, burn_in, memory=list(nnzcolindices=6467)){
container <- matrix(0, ncol = 5, nrow = N)
n <- 544
yes <- 0
no <- 0
alpha_u <- 1
alpha_v <-
beta_u <- 0.01
beta_v <- 0.01
#Y = matrix(Y, ncol = 1)
#E = matrix(E, ncol = 1)
u <- runif(n)
#u = matrix(u, ncol = 1)
eta <- runif(n)
eta = matrix(eta, ncol = 1)
for(i in 1:N){
for(j in 1:thin){
Ku <- rgamma(1, (n-2)/2+alpha_u, beta_u+0.5*t(u)%*%R%*%u)
Kv <- rgamma(1, n/2+alpha_v, beta_v+0.5*t(eta-u)%*%(eta-u))
u <- rmvnorm.canonical(1, Kv*diag(1,n)%*%eta, Ku*R+Kv*diag(1,n))
u <- t(u)
b <- Y+E*exp(eta)*(eta-1)
c <- E*exp(eta)
new <- rmvnorm.canonical(1, Kv*u+b, Kv*diag(1,n)+diag(c))
new <- t(new)
log.target.ratio <- (-0.5*t(new)%*%new*Kv+t(new)%*%u+t(new)%*%Y-t(exp(new))%*%E)
-(-0.5*t(eta)%*%eta*Kv+t(eta)%*%u+t(eta)%*%Y-t(exp(eta))%*%E)
b_new <- Y+E*exp(new)*(new-1)
c_new <- E*exp(new)
Q_num <- Kv*diag.spam(1,n)+diag(c_new)
Q_den <- Kv*diag(1,n)+diag(c)
Epsilon_num <- Kv*u+b_new
Epsilon_den <- Kv*u+b
Mean_num <- solve(Q_num, Epsilon_num)
Mean_den <- solve(Q_den, Epsilon_den)
log.proposal.ratio <- (-0.5*t(Mean_num)%*%Q_num%*%Mean_num - 0.5*t(eta)%*%Q_num%*%eta
+t(eta)%*%Epsilon_num)*log(sqrt(det(Q_num)))
-(-0.5*t(Mean_den)%*%Q_den%*%Mean_den - 0.5*t(new)%*%Q_den%*%new
+t(new)%*%Epsilon_den)*log(sqrt(det(Q_den)))
alpha <- min(1, log.target.ratio+log.proposal.ratio)
if(log(runif(1)) <= alpha){
eta <- new
no <- no + 1
}
else{
yes <- yes + 1
}
}
acceptance <- yes/(yes + no) * 100
container[i,] <- c(Ku, Kv, u[387], eta[387], acceptance)
}
container
}
t1 <- Sys.time()
GI(10,1,1)->vol
Sys.time()-t1
vol
q()
vol
par(mfrow=c(3,1))
plot(vol[,1], type="l")
acf(vol[,1], lag = 50)
truehist(vol[,1])
par(mfrow=c(3,1))
plot(vol[,2], type="l")
acf(vol[,2], lag = 50)
truehist(vol[,2])
par(mfrow=c(3,1))
plot(vol[,3], type="l")
acf(vol[,3], lag = 50)
truehist(vol[,3])
par(mfrow=c(3,1))
plot(vol[,4], type="l")
acf(vol[,4], lag = 50)
truehist(vol[,4])
par(mfrow=c(3,1))
plot(vol[,5], type="l")
acf(vol[,5], lag = 50)
truehist(vol[,5])
par(mfrow=c(1,1))
library(Mass)
library(MASS)
par(mfrow=c(3,1))
plot(vol[,1], type="l")
acf(vol[,1], lag = 50)
truehist(vol[,1])
par(mfrow=c(3,1))
plot(vol[,2], type="l")
acf(vol[,2], lag = 50)
truehist(vol[,2])
par(mfrow=c(3,1))
plot(vol[,3], type="l")
acf(vol[,3], lag = 50)
truehist(vol[,3])
par(mfrow=c(3,1))
plot(vol[,4], type="l")
acf(vol[,4], lag = 50)
truehist(vol[,4])
par(mfrow=c(3,1))
plot(vol[,5], type="l")
acf(vol[,5], lag = 50)
truehist(vol[,5])
par(mfrow=c(1,1))
par(mfrow=c(3,1))
plot(vol[,1], type="l")
acf(vol[,1], lag = 50)
truehist(vol[,1])
t1 <- Sys.time()
GI(100,1,1)->vol
t2 <- Sys.time()
t2 - t1
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
str(Oral) # see structure of data
attach(Oral) # allow direct referencing to Y and E
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(fields, warn.conflict=FALSE)
library(colorspace)
col <- diverge_hcl(8) # blue - red
# alternative colors
# col <- rev(gray(0:8 / 8)) # gray scales
# col <- rev(heat_hcl(64))
# use the function provided by spam
map.landkreis(log(Oral$Y),col=col)
map.landkreis(Oral$Y/Oral$E,col=col)
GI <- function(N, thin, burn_in, memory=list(nnzcolindices=6467)){
container <- matrix(0, ncol = 5, nrow = N)
n <- 544
yes <- 0
no <- 0
alpha_u <- 1
alpha_v <- 1
beta_u <- 0.01
beta_v <- 0.01
Y = matrix(Y, ncol = 1)
E = matrix(E, ncol = 1)
u <- rep(.2, n)
u = matrix(u, ncol = 1)
eta <- rep(1, n)
eta = matrix(eta, ncol = 1)
for(i in 1:N){
for(j in 1:thin){
Ku <- rgamma(1, (n-2)/2+alpha_u, beta_u+t(u)%*%R%*%u*0.5)
Kv <- rgamma(1, n/2+alpha_v, beta_v+t(eta-u)%*%(eta-u)*0.5)
u <- rmvnorm.canonical(1, Kv*eta, Ku*R+Kv*diag.spam(1,n))
u <- t(u)
b <- Y+E*exp(eta)*(eta-1)
c <- E*exp(eta)
new <- rmvnorm.canonical(1, Kv*u+b, Kv*diag.spam(1,n)+diag(c))
new <- t(new)
log.target.ratio <- {(-t(new)%*%new*Kv*0.5+t(new)%*%u*Kv+t(new)%*%Y-t(exp(new))%*%E)
-(-t(eta)%*%eta*Kv*0.5+t(eta)%*%u*Kv+t(eta)%*%Y-t(exp(eta))%*%E)}
b_new <- Y+E*exp(new)*(new-1)
c_new <- E*exp(new)
Q_num <- Kv*diag.spam(1,n)+diag(c_new)
Q_den <- Kv*diag.spam(1,n)+diag(c)
Epsilon_num <- Kv*u+b_new
Epsilon_den <- Kv*u+b
Mean_num <- solve(Q_num, Epsilon_num)
Mean_den <- solve(Q_den, Epsilon_den)
log.proposal.ratio <- {log(sqrt(det(Q_num)))*(-0.5*t(eta-Mean_num)%*%Q_num%*%(eta - Mean_num))
-log(sqrt(det(Q_den)))*(-0.5*t(new - Mean_den)%*%Q_den%*%(new -Mean_den))}
alpha <- min(0, log.target.ratio+log.proposal.ratio)
if(log(runif(1)) <= alpha){
eta <- new
yes <- yes + 1
}
else{
no <- no + 1
}
}
acceptance <- yes/(yes + no) * 100
container[i,] <- c(Ku, Kv, u[387], eta[387], acceptance)
}
container
}
t1 <- Sys.time()
GI(100,1,1)->vol
t2 <- Sys.time()
t2 - t1
par(mfrow=c(3,1))
plot(vol[,1], type="l")
acf(vol[,1], lag = 50)
truehist(vol[,1])
t1 <- Sys.time()
GI(2000,1,1)->vol
t2 <- Sys.time()
t2 - t1
par(mfrow=c(3,1))
plot(vol[,1], type="l")
acf(vol[,1], lag = 50)
truehist(vol[,1])
hist(vol[,1], freq = F)
par(mfrow=c(3,1))
plot(vol[,1], type="l")
acf(vol[,1], lag = 50)
truehist(vol[,1])
par(mfrow=c(3,1))
plot(vol[,2], type="l")
acf(vol[,2], lag = 50)
truehist(vol[,2])
par(mfrow=c(3,1))
plot(vol[,3], type="l")
acf(vol[,3], lag = 50)
truehist(vol[,3])
par(mfrow=c(3,1))
plot(vol[,4], type="l")
acf(vol[,4], lag = 50)
truehist(vol[,4])
par(mfrow=c(3,1))
plot(vol[,5], type="l")
acf(vol[,5], lag = 50)
truehist(vol[,5])
par(mfrow=c(3,1))
plot(vol[,5], type="l")
acf(vol[,5], lag = 50)
truehist(vol[,5])
vol[,1990:2000]
vol[1990:2000,]
vol[1:10,]
vol[1:10,]
vol[1990:2000,]
vol[1990:2002,]
q()
